name: Run Jupyter Notebook and Email Output

on:
  # Schedule for the full report
  schedule:
    - cron: '01 00 * * *'  # Runs at 11:01 PM UTC daily
    - cron: '01 08 * * *'  # Runs at 7:30 AM UTC daily
  # Schedule for hourly updates
    - cron: '15 7-11 * * *'  # Runs hourly between 7 AM and 11 PM UTC
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  run-notebook:
    runs-on: ubuntu-latest

    steps:
      # For checking if availability_updates file is created
      - name: Debug File Listing
        run: ls -al
      
      # Check out the code from the repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Restore cached park_data.json
      - name: Restore cache
        uses: actions/cache@v3
        id: cache-park-data
        with:
          path: park_data.json  # Path to the file you want to cache
          key: park-data-cache
          restore-keys: |
            park-data-cache

      # Print the content of the cached file
      - name: Print park_data.json content
        run: |
          if [ -f park_data.json ]; then
            echo "Cached park_data.json found:"
            cat park_data.json
          else
            echo "No cached park_data.json found."
          fi

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # For checking if availability_updates file is created
      - name: Debug File Listing
        run: ls -al

      # Run the Jupyter Notebook
      - name: Run Jupyter Notebook
        run: |
          if [ -f park_data.json ]; then
            echo "Previous park_data.json found and will be used."
          else
            echo "No previous park_data.json found; starting fresh."
          fi
          jupyter nbconvert --to html --execute hackney_tennis_auto_booking.ipynb --output converted_output.html
        shell: bash

      # Print the content of the cached file
      - name: Print park_data.json content
        run: |
          if [ -f park_data.json ]; then
            echo "Cached park_data.json found:"
            cat park_data.json
          else
            echo "No cached park_data.json found."
          fi

      # Ensure output.html exists for full report schedule
      - name: Confirm output.html exists
        run: |
          if [ ! -f output.html ]; then
            echo "output.html not found! Exiting."
            exit 1
          fi

      # Optional: Print the content of output.html for debugging
      - name: Check output.html content
        run: cat output.html

      # Save the updated park_data.json to cache
      - name: Update cache
        uses: actions/cache@v3
        with:
          path: park_data.json
          key: park-data-cache

      # For checking if availability_updates file is created
      - name: Debug File Listing
        run: ls -al

      # Send email for full availability report
      - name: Send Full Report Email
        if: ${{ github.event_name == 'schedule' && (github.event.schedule == '01 23 * * *' || github.event.schedule == '30 07 * * *') || github.event_name == 'workflow_dispatch' }}
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENDGRID_SENDER_EMAIL: ${{ secrets.SENDGRID_SENDER_EMAIL }}
          SENDGRID_RECIPIENT_EMAIL: ${{ secrets.SENDGRID_RECIPIENT_EMAIL }}
        run: python send_email.py

  send-hourly-updates:
    runs-on: ubuntu-latest
    if: github.event.schedule == '15 7-20 * * *'  # Runs only on hourly update schedule

    steps:
      # Check out the repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # Restore cached park_data.json
      - name: Restore cache
        uses: actions/cache@v3
        id: cache-park-data
        with:
          path: park_data.json
          key: park-data-cache
          restore-keys: |
            park-data-cache

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # For checking if availability_updates file is created
      - name: Debug File Listing
        run: ls -al

      # Check for availability_updates.html and send an email if it exists
      - name: Check and Send Updates Email
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENDGRID_SENDER_EMAIL: ${{ secrets.SENDGRID_SENDER_EMAIL }}
          SENDGRID_RECIPIENT_EMAIL: ${{ secrets.SENDGRID_RECIPIENT_EMAIL }}
        run: |
          if [ -f "availability_updates.html" ]; then
            echo "Updates found. Sending email."
            python send_email.py
          else
            echo "No updates found. Skipping email."
          fi
